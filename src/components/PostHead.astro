---
import { SITE } from '@/consts'
import { isSubpost } from '@/lib/data-utils'
import type { CollectionEntry } from 'astro:content'

interface Props {
  post: CollectionEntry<'blog'>
}

const { post } = Astro.props

const title = post.data.title || SITE.title
const description = post.data.description || SITE.description
const siteUrl = Astro.site?.href ?? SITE.href
const author =
  post.data.authors && post.data.authors.length > 0
    ? post.data.authors.join(', ')
    : SITE.author

const canonicalUrl =
  post.data.canonicalURL ?? new URL(`/posts/${post.id}/`, siteUrl).href

let ogImageUrl: string | undefined

if (typeof post.data.ogImage === 'string') {
  ogImageUrl = new URL(post.data.ogImage, siteUrl).href
} else if (post.data.ogImage?.src) {
  ogImageUrl = new URL(post.data.ogImage.src, siteUrl).href
} else if (post.data.image?.src) {
  ogImageUrl = new URL(post.data.image.src, siteUrl).href
} else if (SITE.dynamicOgImage) {
  ogImageUrl = new URL(`/posts/${post.id}/index.png`, siteUrl).href
} else if (SITE.ogImage) {
  ogImageUrl = new URL(SITE.ogImage, siteUrl).href
} else {
  ogImageUrl = new URL('/astropaper-og.jpg', siteUrl).href
}

const publishedAt =
  (post.data.pubDatetime as Date | undefined)?.toISOString() ??
  (post.data.date as Date | undefined)?.toISOString()
const updatedAt = (
  post.data.modDatetime as Date | null | undefined
)?.toISOString()
---

<title>{`${title} | ${SITE.title}`}</title>
<meta name="title" content={`${title} | ${SITE.title}`} />
<meta name="description" content={description} />
<link rel="canonical" href={canonicalUrl} />

{isSubpost(post.id) && <meta name="robots" content="noindex" />}

<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={ogImageUrl} />
<meta property="og:image:alt" content={title} />
<meta property="og:type" content="article" />
<meta property="og:locale" content={SITE.locale} />
<meta property="og:site_name" content={SITE.title} />
<meta property="og:url" content={canonicalUrl} />
<meta property="og:author" content={author} />
{
  publishedAt && (
    <meta property="article:published_time" content={publishedAt} />
  )
}
{updatedAt && <meta property="article:modified_time" content={updatedAt} />}

<meta name="twitter:title" content={title} />
<meta name="twitter:description" content={description} />
<meta name="twitter:image" content={ogImageUrl} />
<meta name="twitter:image:alt" content={title} />
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:creator" content={author} />

{
  post?.data.tags &&
    post.data.tags.map((tag: string) => {
      return <meta property="article:tag" content={tag} />
    })
}
