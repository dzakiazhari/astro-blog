---
import Link from '@/components/Link.astro'
import ThemeToggle from '@/components/ThemeToggle.astro'
import { NAV_LINKS, SITE } from '@/consts'
import { cn } from '@/lib/utils'
import { Icon } from 'astro-icon/components'
import { Image } from 'astro:assets'
import logo from '../../public/static/logo.svg'

const { pathname } = Astro.url
const normalizedPath =
  pathname === '/' ? pathname : pathname.replace(/\/+$/, '')

const hasReadingStatus = Astro.slots.has('reading-status')
---

<div>
  <div
    class="mx-auto flex max-w-3xl items-center justify-between gap-4 px-4 py-3"
  >
    <Link href="/" class="flex shrink-0 items-center justify-center gap-3">
      <Image src={logo} alt="Logo" class="size-5 sm:size-6" />
      <span
        class="hidden h-full text-lg leading-none font-medium min-[400px]:block"
        >{SITE.title}</span
      >
    </Link>
    <div class="flex items-center gap-4">
      <nav class="flex items-center gap-4 text-sm sm:gap-6">
        {
          NAV_LINKS.map((item) => {
            const isExternal = item.href.startsWith('http')
            const isActive =
              !isExternal &&
              (normalizedPath === item.href ||
                (item.href !== '/' &&
                  normalizedPath.startsWith(`${item.href}/`)))

            return (
              <Link
                href={item.href}
                external={isExternal}
                class={cn(
                  'text-foreground/60 hover:text-foreground inline-flex items-center gap-1 capitalize transition-colors',
                  isActive && 'text-foreground',
                )}
              >
                <span class="flex items-center gap-2">
                  {item.icon && (
                    <Icon name={item.icon} class="text-primary size-4" />
                  )}
                  <span>{item.label}</span>
                </span>
                {isExternal && (
                  <Icon
                    name="lucide:arrow-up-right"
                    class="text-muted-foreground size-3.5"
                    aria-hidden="true"
                  />
                )}
              </Link>
            )
          })
        }
      </nav>
      {
        hasReadingStatus && (
          <div class="hidden items-center md:flex">
            <slot name="reading-status" />
          </div>
        )
      }
      <ThemeToggle transition:persist />
    </div>
  </div>
</div>
