---
export interface Props {
  id?: string;
  href: string;
  class?: string;
  ariaLabel?: string;
  title?: string;
  disabled?: boolean;
  target?: string;
  rel?: string;
  prefetch?: "auto" | "hover" | "tap" | "viewport" | "load" | false;
}

const {
  id,
  href,
  class: className = "",
  ariaLabel,
  title,
  disabled = false,
  target,
  rel,
  prefetch = "auto",
} = Astro.props;

const trimmedTarget = target?.trim();
const normalisedTarget = trimmedTarget?.toLowerCase();
const computedTarget = trimmedTarget === "" ? undefined : trimmedTarget;

const computedRel = (() => {
  if (normalisedTarget !== "_blank") {
    const cleanedRel = rel?.trim();

    return cleanedRel === "" ? undefined : cleanedRel;
  }

  const safeTokens = new Set(
    (rel ?? "")
      .split(/\s+/)
      .map(token => token.trim().toLowerCase())
      .filter(Boolean)
  );

  safeTokens.add("noopener");
  safeTokens.add("noreferrer");

  return Array.from(safeTokens).join(" ");
})();

const isExternalLink = (() => {
  const base = "http://localhost";

  try {
    const parsed = new URL(href, base);

    if (/^(mailto:|tel:)/i.test(parsed.protocol)) {
      return true;
    }

    return parsed.origin !== base;
  } catch {
    return false;
  }
})();

const prefetchAttr = (() => {
  if (prefetch === false) {
    return "false";
  }

  if (prefetch === "auto") {
    return isExternalLink ? "false" : undefined;
  }

  return prefetch;
})();
---

{
  disabled ? (
    <span
      id={id}
      class:list={["group inline-block", className]}
      title={title}
      aria-disabled={disabled}
    >
      <slot />
    </span>
  ) : (
    <a
      id={id}
      {href}
      class:list={["group inline-block hover:text-accent", className]}
      aria-label={ariaLabel}
      title={title}
      target={computedTarget}
      rel={computedRel}
      data-astro-prefetch={prefetchAttr}
    >
      <slot />
    </a>
  )
}
