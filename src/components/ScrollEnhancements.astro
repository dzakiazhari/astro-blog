---
---

<script type="module">
  import { onCleanup, onPageLoad } from "astro/client";
  import { ensureScrollManager } from "@/scripts/scroll-manager";
  import { initBackToTop } from "@/scripts/back-to-top";
  import { initReadingProgress } from "@/scripts/reading-progress";

  let cleanupFns: Array<() => void> = [];
  let pendingIdle: number | null = null;

  const disposeAll = () => {
    for (const cleanup of cleanupFns) {
      cleanup();
    }
    cleanupFns = [];
  };

  const queueIdle = () => {
    if (pendingIdle !== null) {
      if ("cancelIdleCallback" in window) {
        window.cancelIdleCallback(pendingIdle as number);
      } else {
        window.clearTimeout(pendingIdle);
      }
      pendingIdle = null;
    }

    if ("requestIdleCallback" in window) {
      pendingIdle = window.requestIdleCallback(() => {
        pendingIdle = null;
        runEnhancements();
      }, { timeout: 300 });
    } else {
      pendingIdle = window.setTimeout(() => {
        pendingIdle = null;
        runEnhancements();
      }, 120);
    }
  };

  const runEnhancements = () => {
    disposeAll();

    const manager = ensureScrollManager();
    if (!manager) {
      return;
    }

    const cleanups = [
      initReadingProgress(manager),
      initBackToTop(manager),
    ].filter(Boolean) as Array<() => void>;

    if (cleanups.length > 0) {
      cleanupFns = cleanups;
      manager.refresh();
    }
  };

  onPageLoad(() => {
    queueIdle();
  });

  onCleanup(() => {
    if (pendingIdle !== null) {
      if ("cancelIdleCallback" in window) {
        window.cancelIdleCallback(pendingIdle as number);
      } else {
        window.clearTimeout(pendingIdle);
      }
      pendingIdle = null;
    }

    disposeAll();
  });
</script>
