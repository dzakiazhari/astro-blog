---
import "@pagefind/default-ui/css/ui.css";
import Main from "@/layouts/Main.astro";
import Layout from "@/layouts/Layout.astro";
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";
import { SITE } from "@/config";

const backUrl = SITE.showBackButton ? `${Astro.url.pathname}` : "/";
---

<Layout title={`Search | ${SITE.title}`}>
  <Header />
  <Main pageTitle="Search" pageDesc="Search any article ...">
    <div id="pagefind-shell" class="pagefind-shell" transition:persist>
      <div
        class="pagefind-placeholder"
        data-pagefind-placeholder
        aria-hidden="true"
      >
        <div class="pagefind-placeholder__input" />
        <div class="pagefind-placeholder__list">
          <div class="pagefind-placeholder__item" />
          <div class="pagefind-placeholder__item" />
          <div class="pagefind-placeholder__item" />
        </div>
      </div>
      <div
        id="pagefind-search"
        data-backurl={backUrl}
        data-pagefind-ready="false"
      ></div>
    </div>
  </Main>
  <Footer />
</Layout>

<script lang="ts">
  (() => {
    const SHELL_SELECTOR = "#pagefind-shell";
    const CONTAINER_SELECTOR = "#pagefind-search";
    let bootstrapped = false;
    let observer: IntersectionObserver | null = null;

    const scheduleIdle: (
      callback: IdleRequestCallback | (() => void)
    ) => void =
      window.requestIdleCallback
        ? callback => window.requestIdleCallback(callback, { timeout: 500 })
        : callback => window.setTimeout(callback, 80);

    const hidePlaceholder = (container: HTMLElement) => {
      const shell = container.closest<HTMLElement>(SHELL_SELECTOR);
      const placeholder = shell?.querySelector<HTMLElement>(
        "[data-pagefind-placeholder]"
      );

      placeholder?.setAttribute("hidden", "");
    };

    const showPlaceholder = (container: HTMLElement) => {
      const shell = container.closest<HTMLElement>(SHELL_SELECTOR);
      const placeholder = shell?.querySelector<HTMLElement>(
        "[data-pagefind-placeholder]"
      );

      placeholder?.removeAttribute("hidden");
    };

    const bootstrapSearch = () => {
      if (bootstrapped) {
        return;
      }

      const container = document.querySelector<HTMLElement>(CONTAINER_SELECTOR);
      if (!container) {
        return;
      }

      bootstrapped = true;
      container.dataset.pagefindReady = "loading";
      hidePlaceholder(container);

      const params = new URLSearchParams(window.location.search);

      scheduleIdle(async () => {
        // @ts-expect-error â€” Missing types for @pagefind/default-ui package.
        const { PagefindUI } = await import("@pagefind/default-ui");

        if (import.meta.env.DEV) {
          container.innerHTML = `
              <div class="pagefind-dev-warning">
                <p><strong>DEV mode warning:</strong> run <code>pnpm run build</code> to hydrate Pagefind results locally.</p>
              </div>
            `;
        }

        const search = new PagefindUI({
          element: CONTAINER_SELECTOR,
          showSubResults: true,
          showImages: false,
          processTerm: function (term: string) {
            params.set("q", term);
            history.replaceState(history.state, "", "?" + params.toString());

            const backUrl = container.dataset.backurl;
            if (backUrl) {
              sessionStorage.setItem(
                "backUrl",
                `${backUrl}?${params.toString()}`
              );
            }

            return term;
          },
        });

        const query = params.get("q");
        if (query) {
          search.triggerSearch(query);
        }

        const resetSearchParam = (event: Event) => {
          const target = event.target as HTMLInputElement | null;
          if (!target || target.value.trim() !== "") {
            return;
          }

          history.replaceState(history.state, "", window.location.pathname);
        };

        const searchInput = document.querySelector(
          ".pagefind-ui__search-input"
        );
        const clearButton = document.querySelector(
          ".pagefind-ui__search-clear"
        );
        searchInput?.addEventListener("input", resetSearchParam);
        clearButton?.addEventListener("click", resetSearchParam);

        container.dataset.pagefindReady = "true";
      });
    };

    const disconnectObserver = () => {
      observer?.disconnect();
      observer = null;
    };

    const queueBootstrap = () => {
      const container = document.querySelector<HTMLElement>(CONTAINER_SELECTOR);
      if (!container) {
        return;
      }

      if (bootstrapped) {
        hidePlaceholder(container);
        container.dataset.pagefindReady = "true";
        return;
      }

      showPlaceholder(container);
      container.dataset.pagefindReady = "false";

      const handleKeydown = (event: KeyboardEvent) => {
        if (event.key === "Tab") {
          trigger();
        }
      };

      const trigger = () => {
        disconnectObserver();
        container.removeEventListener("focusin", trigger);
        container.removeEventListener("pointerdown", trigger);
        container.removeEventListener("keydown", handleKeydown);
        bootstrapSearch();
      };

      disconnectObserver();
      observer = new IntersectionObserver(
        entries => {
          if (entries.some(entry => entry.isIntersecting)) {
            trigger();
          }
        },
        { rootMargin: "0px", threshold: 0.25 }
      );

      observer.observe(container);

      container.addEventListener("focusin", trigger, { once: true });
      container.addEventListener("pointerdown", trigger, { once: true });

      container.addEventListener("keydown", handleKeydown);

      if (new URLSearchParams(window.location.search).has("q")) {
        trigger();
      }
    };

    document.addEventListener("astro:after-swap", queueBootstrap);
    document.addEventListener("astro:page-load", () => {
      bootstrapped = false;
      queueBootstrap();
    });

    if (document.readyState === "loading") {
      document.addEventListener("DOMContentLoaded", queueBootstrap, {
        once: true,
      });
    } else {
      queueBootstrap();
    }
  })();
</script>

<style is:global>
  #pagefind-search {
    --pagefind-ui-font: var(--font-mono);
    --pagefind-ui-text: var(--foreground);
    --pagefind-ui-background: var(--background);
    --pagefind-ui-border: var(--border);
    --pagefind-ui-primary: var(--accent);
    --pagefind-ui-tag: var(--background);
    --pagefind-ui-border-radius: 0.375rem;
    --pagefind-ui-border-width: 1px;
    --pagefind-ui-image-border-radius: 8px;
    --pagefind-ui-image-box-ratio: 3 / 2;

    min-height: var(--shell-content-min-height);

    form::before {
      background-color: var(--foreground);
    }

    input {
      font-weight: 400;
      border: 1px solid var(--border);
    }

    input:focus-visible {
      outline: 1px solid var(--accent);
    }

    .pagefind-ui__result-title a {
      color: var(--accent);
      outline-offset: 1px;
      outline-color: var(--accent);
    }

    .pagefind-ui__result-title a:focus-visible,
    .pagefind-ui__search-clear:focus-visible {
      text-decoration-line: none;
      outline-width: 2px;
      outline-style: dashed;
    }

    .pagefind-ui__result:last-of-type {
      border-bottom: 0;
    }

    .pagefind-ui__result-nested .pagefind-ui__result-link:before {
      font-family: system-ui;
    }
  }

  .pagefind-shell {
    display: grid;
    gap: clamp(1.25rem, 1rem + 1vw, 1.75rem);
    min-height: var(--shell-content-min-height);
  }

  [data-pagefind-placeholder] {
    display: grid;
    gap: clamp(0.9rem, 0.75rem + 0.6vw, 1.1rem);
    padding: clamp(1.25rem, 1rem + 1vw, 1.75rem);
    border-radius: var(--radius-md);
    border: 1px dashed color-mix(in srgb, var(--border-soft) 80%, transparent);
    background: color-mix(in srgb, var(--surface-raised) 84%, transparent);
  }

  .pagefind-placeholder__input {
    height: 3rem;
    border-radius: var(--radius-sm);
    background: color-mix(in srgb, var(--surface-outline) 22%, transparent);
  }

  .pagefind-placeholder__list {
    display: grid;
    gap: 0.75rem;
  }

  .pagefind-placeholder__item {
    height: clamp(2.8rem, 2.6rem + 0.6vw, 3rem);
    border-radius: var(--radius-sm);
    background: color-mix(in srgb, var(--surface-outline) 18%, transparent);
  }

  .pagefind-dev-warning {
    border-radius: var(--radius-sm);
    border: 1px solid color-mix(in srgb, var(--accent) 42%, transparent);
    background: color-mix(in srgb, var(--accent) 16%, transparent);
    padding: clamp(1rem, 0.9rem + 0.5vw, 1.35rem);
  }
</style>
