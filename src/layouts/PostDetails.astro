---
import { render, type CollectionEntry } from "astro:content";
import Layout from "@/layouts/Layout.astro";
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";
import Tag from "@/components/Tag.astro";
import Datetime from "@/components/Datetime.astro";
import EditPost from "@/components/EditPost.astro";
import BackButton from "@/components/BackButton.astro";
import BackToTopButton from "@/components/BackToTopButton.astro";
import Comments from "@/components/Comments"; // React Giscus
import { getPath } from "@/utils/getPath";
import { slugifyStr } from "@/utils/slugify";
import IconChevronLeft from "@/assets/icons/IconChevronLeft.svg";
import IconChevronRight from "@/assets/icons/IconChevronRight.svg";
import { SITE } from "@/config";

export interface Props {
  post: CollectionEntry<"blog">;
  posts: CollectionEntry<"blog">[];
}

const { post, posts } = Astro.props;

const {
  title,
  author,
  description,
  ogImage: initOgImage,
  canonicalURL,
  pubDatetime,
  modDatetime,
  timezone,
  tags,
  hideEditPost,
} = post.data;

const { Content } = await render(post);

let ogImageUrl: string | undefined;

// Determine OG image source
if (typeof initOgImage === "string") {
  ogImageUrl = initOgImage; // Remote OG image (absolute URL)
} else if (initOgImage?.src) {
  ogImageUrl = initOgImage.src; // Local asset
}

// Use dynamic OG image if enabled and no remote|local ogImage
if (!ogImageUrl && SITE.dynamicOgImage) {
  ogImageUrl = `${getPath(post.id, post.filePath)}/index.png`;
}

// Resolve OG image URL (or fallback to SITE.ogImage / default `og.png`)
const ogImage = ogImageUrl
  ? new URL(ogImageUrl, Astro.url.origin).href
  : undefined;

const layoutProps = {
  title: `${title} | ${SITE.title}`,
  author,
  description,
  pubDatetime,
  modDatetime,
  canonicalURL,
  ogImage,
  scrollSmooth: true,
};

/* ========== Prev/Next Posts ========== */

const allPosts = posts.map(({ data: { title }, id, filePath }) => ({
  id,
  title,
  filePath,
}));

const currentPostIndex = allPosts.findIndex(a => a.id === post.id);

const prevPost = currentPostIndex !== 0 ? allPosts[currentPostIndex - 1] : null;
const nextPost =
  currentPostIndex !== allPosts.length ? allPosts[currentPostIndex + 1] : null;
---

<Layout {...layoutProps}>
  <Header />
  <BackButton />
  <main
    id="main-content"
    class:list={[
      "mx-auto w-full max-w-app px-4 pb-12",
      { "mt-8": !SITE.showBackButton },
    ]}
    data-pagefind-body
  >
    <h1
      transition:name={slugifyStr(title)}
      class="inline-block text-2xl font-bold text-accent sm:text-3xl"
    >
      {title}
    </h1>
    <div class="my-2 flex items-center gap-2">
      <Datetime {pubDatetime} {modDatetime} {timezone} size="lg" />
      <span
        aria-hidden="true"
        class:list={[
          "max-sm:hidden",
          { hidden: !SITE.editPost.enabled || hideEditPost },
        ]}>|</span
      >
      <EditPost {hideEditPost} {post} class="max-sm:hidden" />
    </div>
    <article id="article" class="app-prose mx-auto mt-8 max-w-app">
      <Content />
    </article>

    <hr class="my-8 border-dashed" />

    <EditPost class="sm:hidden" {hideEditPost} {post} />

    <ul class="mt-4 mb-8 sm:my-8">
      {tags.map(tag => <Tag tag={slugifyStr(tag)} tagName={tag} />)}
    </ul>

    <!-- Giscus comments (React, theme-aware) -->
    <section id="comments" data-pagefind-ignore class="mt-6">
      <h2 class="sr-only">Comments</h2>
      <Comments client:only="react" />
    </section>

    <BackToTopButton />

    <hr class="my-6 border-dashed" />

    <!-- Previous/Next Post Buttons -->
    <div data-pagefind-ignore class="grid grid-cols-1 gap-6 sm:grid-cols-2">
      {
        prevPost && (
          <a
            href={getPath(prevPost.id, prevPost.filePath)}
            class="flex w-full gap-1 hover:opacity-75"
          >
            <IconChevronLeft class="inline-block flex-none rtl:rotate-180" />
            <div>
              <span>Previous Post</span>
              <div class="text-sm text-accent/85">{prevPost.title}</div>
            </div>
          </a>
        )
      }
      {
        nextPost && (
          <a
            href={getPath(nextPost.id, nextPost.filePath)}
            class="flex w-full justify-end gap-1 text-end hover:opacity-75 sm:col-start-2"
          >
            <div>
              <span>Next Post</span>
              <div class="text-sm text-accent/85">{nextPost.title}</div>
            </div>
            <IconChevronRight class="inline-block flex-none rtl:rotate-180" />
          </a>
        )
      }
    </div>
  </main>
  <Footer />
</Layout>

<script src="/scripts/reading-progress.js" defer></script>

<script is:inline data-astro-rerun>
  /** Attaches links to headings in the document,
   *  allowing sharing of sections easily */
  function addHeadingLinks() {
    const headings = Array.from(
      document.querySelectorAll("h2, h3, h4, h5, h6")
    );
    for (const heading of headings) {
      heading.classList.add("group");
      const link = document.createElement("a");
      link.className =
        "heading-link ms-2 no-underline opacity-75 md:opacity-0 md:group-hover:opacity-100 md:focus:opacity-100";
      link.href = "#" + heading.id;

      const span = document.createElement("span");
      span.ariaHidden = "true";
      span.innerText = "#";
      link.appendChild(span);
      heading.appendChild(link);
    }
  }
  addHeadingLinks();

  /** Attaches copy buttons to code blocks in the document,
   * allowing users to copy code easily. */
  const NAV_HANDLER_KEY = "__astroCopyButtonHandler";

  function attachCopyButtons() {
    const copyButtonLabel = "Copy";
    const codeBlocks = Array.from(document.querySelectorAll("pre")).filter(
      code => !code.closest(".expressive-code")
    );

    for (const codeBlock of codeBlocks) {
      const parent = codeBlock.parentElement;
      const existingButton = parent?.classList.contains("code-block")
        ? parent.querySelector(".copy-code")
        : codeBlock.querySelector(".copy-code");

      if (existingButton) continue;

      let wrapper = parent;
      if (!wrapper || !wrapper.classList.contains("code-block")) {
        wrapper = document.createElement("div");
        wrapper.className = "code-block group relative";
        codeBlock.parentNode?.insertBefore(wrapper, codeBlock);
        wrapper.appendChild(codeBlock);
      } else {
        wrapper.classList.add("group", "relative");
      }

      const computedStyle = getComputedStyle(codeBlock);
      const baseOffset =
        computedStyle.getPropertyValue("--code-copy-offset").trim() ||
        computedStyle.getPropertyValue("padding-top").trim() ||
        "1.4rem";
      const fileNameOffset = computedStyle
        .getPropertyValue("--file-name-offset")
        .trim();

      const copyButton = document.createElement("button");
      copyButton.type = "button";
      copyButton.className = "copy-code";
      copyButton.textContent = copyButtonLabel;
      copyButton.setAttribute("aria-label", "Copy code to clipboard");
      copyButton.setAttribute("data-state", "idle");
      const buttonOffset =
        fileNameOffset && fileNameOffset !== "0"
          ? `calc(${baseOffset} + ${fileNameOffset})`
          : baseOffset;
      copyButton.style.setProperty("--copy-button-top", buttonOffset);

      wrapper.appendChild(copyButton);
      codeBlock.setAttribute("tabindex", "0");

      copyButton.addEventListener("click", async () => {
        await copyCode(codeBlock, copyButton);
      });
    }

    async function copyCode(block, button) {
      const code = block.querySelector("code");
      const text = code?.innerText;

      await navigator.clipboard.writeText(text ?? "");

      button.dataset.state = "copied";
      button.textContent = "Copied";
      button.setAttribute("aria-label", "Code copied to clipboard");

      setTimeout(() => {
        button.dataset.state = "idle";
        button.textContent = copyButtonLabel;
        button.setAttribute("aria-label", "Copy code to clipboard");
      }, 1200);
    }
  }

  const navigationHandler =
    window[NAV_HANDLER_KEY] ||
    (window[NAV_HANDLER_KEY] = () => queueMicrotask(attachCopyButtons));

  for (const eventName of ["astro:page-load", "astro:after-swap"]) {
    document.removeEventListener(eventName, navigationHandler);
    document.addEventListener(eventName, navigationHandler);
  }

  queueMicrotask(attachCopyButtons);

  /* Go to page start after page swap */
  document.addEventListener("astro:after-swap", () =>
    window.scrollTo({ left: 0, top: 0, behavior: "instant" })
  );
</script>
